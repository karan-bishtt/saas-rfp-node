module.exports = {
  multer: {
    invalidFormData: "Invalid form data",
    invalidFileUpload: "Invalid file upload",
    invalidFormData: "Invalid form data",
  },
  common: {
    userNotFound: "User not found",
  },
  auth: {
    noToken: "No token provided",
    userNotFound: "User not found",
    invalidCredentials: "Invalid credentials",
    allFieldsRequired: "All fields except lastname are required",
    emailAlreadyExist: "Email already exists",
    registerSuccess:
      "Registration successful. You will be notify once your request is approved",
    emailOldNewPasswordRequired:
      "Email, old password and new password are required",
    userNotFound: "User not found",
    invalidOldCredentials: "Invalid old credentials",
    passwordLeqSix: "Password length should be greater than 6",
    otpSent: "OTP sent to your email",
    optRequired: "OTP is required",
    invalidOTP: "Invalid OTP",
    passwordResetSuccess: "Password reset successfully",
    failedToSendOTP: "Failed to send OTP",
    tenantAlreadyExist: "Tenant already exists",
    pendingRequest: "Your account is not active please wait for approval",
    rejectedRequestAdmin:
      "Your registration request has been rejected by the super admin. Please contact super admin",
    rejectedRequest:
      "Your registration request has been rejected by the admin. Please contact your admin",
    useNotPresent: "User not present",
    tenantIdNotExist: "Tenant id does not exist",
    unauthorized: "Unauthorized",
  },
  category: {
    notFound: "Category not found",
    unauthorizedCreate: "Unauthorized to create the category",
    invalidTenant: "Invalid tenant id",
    created: "Category created",
    failedCreate: "Failed to create category",
    idRequired: "Category id is required",
    updated: "Category updated",
    failedUpdate: "Failed to update category",
    deleted: "Category deleted",
    failedDelete: "Failed to delete category",
    failedToUploadCategories: "Failed to upload categories",
    noDataToUpload: "No data to upload",
    uploaded: "Categories uploaded successfully",
    alreadyExists: "Category already exists",
    noFileToUpload: "No file to upload",
  },
  vendor: {
    getAuthorized: "Unauthorized to get vendors",
    errorFetchingVendors: "Error fetching vendors",
    approveSuccess: "Vendor approved successfully",
    approveFailed: "Failed to approve vendor",
    invalidRole: "Invalid vendor role",
    errorExcelGeneration: "Error generating excel",
  },
  manager: {
    errorFetchingmanagers: "Error fetching managers",
    approveSuccess: "Manager approved successfully",
    approveFailed: "Failed to approve manager",
    invalidRole: "Invalid manager role",
    alreadyApproved: "Manager is already approved",
  },
  accountant: {
    errorFetchingAccountants: "Error fetching accountants",
    approveSuccess: "Accountant approved successfully",
    approveFailed: "Failed to approve accountant",
    invalidRole: "Invalid accountant role",
    alreadyApproved: "Accountant is already approved",
  },
  rfps: {
    fetchingrfpsData: "Error fetching rfps data",
    rfpIdRequired: "RFP ID is required",
    getRfpQuotesFetchError: "Error fetching vendor quotes",
    closeRfpSuccessfully: "RFP closed successfully. {} records updated",
    closeRfpFailed: "Failed to close RFP. Invalid ID",
    closeRfpError: "Error closing RFP",
    vendorsRequired: "Vendors are required",
    minimumPriceGreaterThanMaximumPrice:
      "Minimum price should be less than maximum price",
    quantityGreaterThanZero: "Quantity should be greater than zero",
    vendorNotFound: "Vendor not found",
    vendorIdsNotFound: "SomeVendors are not found in the current tenant",
    rfpCreated: "RFP created successfully",
    failedCreateRfp: "Failed to create RFP",
    invalidCategoryForTenant: "Invalid category for tenant",
    quantityRequired: "Quantity is required",
    rfpNotFound: "Rfp not found",
    rfpAlreadyClosed: "Rfp is already closed",
    rfpAlreadyApplied: "Rfp is already applied",
  },
  rfpVendor: {
    failedToApplyRfp: "Failed to apply for RFP",
    appliedForRfp: "Applied for RFP successfully",
    rfpNotFound: "Rfp not found please choose a valid open rfp",
    alreadyApproved: "Vendor is already approved",
    invalidPrice: "Invalid price",
    invalidQuantity: "Invalid quantity",
    rfpNotOpen: "RFP is not open",
  },
  admin: {
    errorFetchingadmins: "Error fetching admins",
    approveSuccess: "Admin approved successfully",
    approveFailed: "Failed to approve admin",
    sameStatusError: "Admin is already in the same status",
    alreadyApproved: "Admin is already approved",
  },
  error: {
    somethingWentWrong: "Something went wrong",
    invalidCredentials: "Invalid credentials",
    invalidToken: "Invalid token",
    invalidOtp: "Invalid OTP",
    invalidEmail: "Invalid email",
    invalidPassword: "Invalid password",
    invalidMobile: "Invalid mobile number",
    invalidName: "Invalid name",
    invalidRole: "Invalid role",
    invalidStatus: "Invalid status",
    invalidTenantId: "Invalid tenant id",
    invalidCategoryId: "Invalid category id",
    unautorized: "Unauthorized",
    failedToFetchData: "Failed to fetch data",
  },
};
